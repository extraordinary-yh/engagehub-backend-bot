# Generated by Django 4.2.23 on 2025-08-19 21:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_discordlinkcode'),
    ]

    operations = [
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('specialties', models.TextField(help_text='Industries or specializations (e.g., Tech, Finance, Consulting)')),
                ('bio', models.TextField(blank=True, help_text='Professional background and experience')),
                ('availability', models.JSONField(default=dict, help_text='Availability preferences and schedule')),
                ('is_active', models.BooleanField(default=True)),
                ('total_reviews', models.IntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating from students', max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'professionals',
                'ordering': ['name'],
            },
        ),
        migrations.AlterField(
            model_name='activity',
            name='activity_type',
            field=models.CharField(choices=[('resume_upload', 'Resume Upload'), ('resume_review_request', 'Resume Review Request'), ('event_attendance', 'Event Attendance'), ('resource_share', 'Resource Share'), ('like_interaction', 'Like/Interaction'), ('linkedin_post', 'LinkedIn Post'), ('discord_activity', 'Discord Activity')], max_length=25),
        ),
        migrations.CreateModel(
            name='ReviewRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Match'), ('matched', 'Matched with Professional'), ('scheduled', 'Review Scheduled'), ('completed', 'Review Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('form_data', models.JSONField(default=dict, help_text='Data from Google Form submission')),
                ('target_industry', models.CharField(blank=True, max_length=100)),
                ('target_role', models.CharField(blank=True, max_length=100)),
                ('experience_level', models.CharField(blank=True, max_length=50)),
                ('preferred_times', models.JSONField(default=list, help_text="Student's preferred time slots")),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('session_duration', models.IntegerField(default=30, help_text='Duration in minutes')),
                ('review_notes', models.TextField(blank=True, help_text="Professional's feedback notes")),
                ('student_feedback', models.TextField(blank=True, help_text="Student's feedback about the review")),
                ('rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Student rating (1-5)', null=True)),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('matched_date', models.DateTimeField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True)),
                ('professional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_reviews', to='core.professional')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'review_requests',
                'ordering': ['-submission_date'],
            },
        ),
    ]
