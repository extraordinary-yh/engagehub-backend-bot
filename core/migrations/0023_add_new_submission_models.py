# Generated by Django 4.2.23 on 2025-09-24 23:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone


def create_new_activities(apps, schema_editor):
    """Create new Activity records for all new activity types with updated point values"""
    Activity = apps.get_model('core', 'Activity')
    
    # Update existing activity point values
    existing_updates = {
        'discord_activity': {'points_value': 5, 'name': 'Discord Activity'},
        'event_attendance': {'points_value': 20, 'name': 'Event Attendance'},
        'resource_share': {'points_value': 15, 'name': 'Resource Share'},
        'linkedin_post': {'points_value': 50, 'name': 'LinkedIn Post'},
    }
    
    for activity_type, updates in existing_updates.items():
        Activity.objects.filter(activity_type=activity_type).update(**updates)
    
    # Create new activities
    new_activities = [
        ('job_lead_post', 'Job Lead Post', 10, 'professional'),
        ('thoughtful_reply', 'Thoughtful Reply', 25, 'engagement'),
        ('resume_feedback_provide', 'Resume Feedback Provide', 75, 'professional'),
        ('study_group_lead', 'Study Group Lead', 100, 'professional'),
        ('resource_walkthrough', 'Resource Walkthrough', 100, 'content'),
        ('mock_interview_host', 'Mock Interview Host', 150, 'professional'),
        ('teach_share_session', 'Teach & Share Session', 200, 'content'),
        ('peer_mentor', 'Peer Mentor', 250, 'engagement'),
        ('mini_event_organize', 'Mini Event Organize', 300, 'events'),
        ('professional_referral', 'Professional Referral', 500, 'professional'),
        ('exclusive_resource', 'Exclusive Resource', 750, 'content'),
        ('external_workshop', 'External Workshop', 1000, 'events'),
    ]
    
    for activity_type, name, points, category in new_activities:
        Activity.objects.get_or_create(
            activity_type=activity_type,
            defaults={
                'name': name,
                'points_value': points,
                'category': category,
                'is_active': True,
                'created_at': timezone.now(),
            }
        )


def reverse_activities(apps, schema_editor):
    """Remove new activities and restore old point values"""
    Activity = apps.get_model('core', 'Activity')
    
    # Remove new activities
    new_activity_types = [
        'job_lead_post', 'thoughtful_reply', 'resume_feedback_provide',
        'study_group_lead', 'resource_walkthrough', 'mock_interview_host',
        'teach_share_session', 'peer_mentor', 'mini_event_organize',
        'professional_referral', 'exclusive_resource', 'external_workshop'
    ]
    
    Activity.objects.filter(activity_type__in=new_activity_types).delete()
    
    # Restore original point values
    Activity.objects.filter(activity_type='discord_activity').update(points_value=1)
    Activity.objects.filter(activity_type='event_attendance').update(points_value=15)
    Activity.objects.filter(activity_type='resource_share').update(points_value=10)
    Activity.objects.filter(activity_type='linkedin_post').update(points_value=5)


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0022_auto_20250924_0156'),
    ]

    operations = [
        # Update Activity model choices
        migrations.AlterField(
            model_name='activity',
            name='activity_type',
            field=models.CharField(
                choices=[
                    ('resume_upload', 'Resume Upload'),
                    ('resume_review_request', 'Resume Review Request'),
                    ('event_attendance', 'Event Attendance'),
                    ('resource_share', 'Resource Share'),
                    ('like_interaction', 'Like/Interaction'),
                    ('linkedin_post', 'LinkedIn Post'),
                    ('discord_activity', 'Discord Activity'),
                    ('job_lead_post', 'Job Lead Post'),
                    ('thoughtful_reply', 'Thoughtful Reply'),
                    ('resume_feedback_provide', 'Resume Feedback Provide'),
                    ('study_group_lead', 'Study Group Lead'),
                    ('resource_walkthrough', 'Resource Walkthrough'),
                    ('mock_interview_host', 'Mock Interview Host'),
                    ('teach_share_session', 'Teach & Share Session'),
                    ('peer_mentor', 'Peer Mentor'),
                    ('mini_event_organize', 'Mini Event Organize'),
                    ('professional_referral', 'Professional Referral'),
                    ('exclusive_resource', 'Exclusive Resource'),
                    ('external_workshop', 'External Workshop'),
                ],
                max_length=25
            ),
        ),
        
        # Create JobLeadSubmission model
        migrations.CreateModel(
            name='JobLeadSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_job_leads', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_lead_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'job_lead_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_joblead_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_joblead_user_status'),
                ],
            },
        ),
        
        # Create ThoughtfulReplySubmission model
        migrations.CreateModel(
            name='ThoughtfulReplySubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_thoughtful_replies', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thoughtful_reply_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'thoughtful_reply_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_reply_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_reply_user_status'),
                ],
            },
        ),
        
        # Create ResumeFeedbackSubmission model
        migrations.CreateModel(
            name='ResumeFeedbackSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_resume_feedback', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resume_feedback_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'resume_feedback_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_feedback_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_feedback_user_status'),
                ],
            },
        ),
        
        # Create StudyGroupSubmission model
        migrations.CreateModel(
            name='StudyGroupSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_study_groups', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_group_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'study_group_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_study_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_study_user_status'),
                ],
            },
        ),
        
        # Create ResourceWalkthroughSubmission model
        migrations.CreateModel(
            name='ResourceWalkthroughSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_resource_walkthroughs', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_walkthrough_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'resource_walkthrough_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_walkthrough_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_walkthrough_user_status'),
                ],
            },
        ),
        
        # Create MockInterviewSubmission model
        migrations.CreateModel(
            name='MockInterviewSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_mock_interviews', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mock_interview_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mock_interview_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_mock_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_mock_user_status'),
                ],
            },
        ),
        
        # Create TeachShareSubmission model
        migrations.CreateModel(
            name='TeachShareSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_teach_shares', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teach_share_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'teach_share_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_teach_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_teach_user_status'),
                ],
            },
        ),
        
        # Create PeerMentorSubmission model
        migrations.CreateModel(
            name='PeerMentorSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_peer_mentors', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_mentor_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'peer_mentor_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_mentor_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_mentor_user_status'),
                ],
            },
        ),
        
        # Create MiniEventSubmission model
        migrations.CreateModel(
            name='MiniEventSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_mini_events', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mini_event_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mini_event_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_mini_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_mini_user_status'),
                ],
            },
        ),
        
        # Create ProfessionalReferralSubmission model
        migrations.CreateModel(
            name='ProfessionalReferralSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_professional_referrals', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professional_referral_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'professional_referral_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_referral_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_referral_user_status'),
                ],
            },
        ),
        
        # Create ExclusiveResourceSubmission model
        migrations.CreateModel(
            name='ExclusiveResourceSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_exclusive_resources', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusive_resource_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'exclusive_resource_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_exclusive_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_exclusive_user_status'),
                ],
            },
        ),
        
        # Create ExternalWorkshopSubmission model
        migrations.CreateModel(
            name='ExternalWorkshopSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('points_awarded', models.IntegerField(default=0)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_external_workshops', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_workshop_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'external_workshop_submissions',
                'ordering': ['-submitted_at'],
                'indexes': [
                    models.Index(fields=['status', '-submitted_at'], name='idx_workshop_status_sub'),
                    models.Index(fields=['user', 'status'], name='idx_workshop_user_status'),
                ],
            },
        ),
        
        # Data migration to create activities and update point values
        migrations.RunPython(create_new_activities, reverse_activities),
    ]
